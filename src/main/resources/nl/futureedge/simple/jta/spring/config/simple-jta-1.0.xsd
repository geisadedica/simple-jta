<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns="http://www.future-edge.nl/schema/simple/jta"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans"
            xmlns:tool="http://www.springframework.org/schema/tool"
            targetNamespace="http://www.future-edge.nl/schema/simple/jta"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.springframework.org/schema/beans" schemaLocation="http://www.springframework.org/schema/beans/spring-beans.xsd"/>
    <xsd:import namespace="http://www.springframework.org/schema/tool" schemaLocation="http://www.springframework.org/schema/tool/spring-tool.xsd"/>

    <xsd:element name="transaction-manager">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Creates an custom JTA transaction manager, a custom JTA transaction monitor and a
                Spring JTA Platform Transaction Manager.
            ]]></xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.springframework.transaction.jta.JtaTransactionManager"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:choice maxOccurs="1">
                        <xsd:element name="file-transaction-store" type="fileTransactionStoreType">
                            <xsd:annotation>
                                <xsd:documentation><![CDATA[
                                    A file-based transaction store.
                                ]]></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="jdbc-transaction-store" type="jdbcTransactionStoreType">
                            <xsd:annotation>
                                <xsd:documentation><![CDATA[
                                    A JDBC-based transaction store.
                                ]]></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:choice>

                    <xsd:attribute name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Can be used to create one or more aliases illegal in an (XML) id.
                                Multiple aliases can be separated by any number of spaces, commas,
                                or semi-colons (or indeed any mixture of the three).
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="unique-name" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Unique name to use for the custom JTA transaction manager.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="depends-on" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                The names of the beans that this bean depends on being initialized.
                                The bean factory will guarantee that these beans get initialized
                                before this bean.

                                Note that dependencies are normally expressed through bean properties
                                or constructor arguments. This property should just be necessary for
                                other kinds of dependencies like statics (*ugh*) or database preparation
                                on startup.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="fileTransactionStoreType">
        <xsd:attribute name="location" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    The location to store the file based transaction logs. Must be a (existing)
                    directory.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="store-all-states" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    If set to true, all transaction states (both globally and per branch) are stored.
                    If set to false, only the minimum needed state is stored.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="depends-on" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    The names of the beans that this bean depends on being initialized.
                    The bean factory will guarantee that these beans get initialized
                    before this bean.

                    Note that dependencies are normally expressed through bean properties
                    or constructor arguments. This property should just be necessary for
                    other kinds of dependencies like statics (*ugh*) or database preparation
                    on startup.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="jdbcTransactionStoreType">
        <xsd:attribute name="create" type="xsd:boolean">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    Should the transaction tables be created during startup?
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="driver" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    JDBC Driver (only need for pre JDBC 4.0 drivers).
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="url" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    JDBC URL.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="user" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    JDBC User.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="password" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    JDBC Password.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="store-all-states" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    If set to true, all transaction states (both globally and per branch) are stored.
                    If set to false, only the minimum needed state is stored.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="depends-on" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
                    The names of the beans that this bean depends on being initialized.
                    The bean factory will guarantee that these beans get initialized
                    before this bean.

                    Note that dependencies are normally expressed through bean properties
                    or constructor arguments. This property should just be necessary for
                    other kinds of dependencies like statics (*ugh*) or database preparation
                    on startup.
                ]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="data-source">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Creates an JDBC DataSource wrapped around a supplied XADataSource to support JTA
                transactions.
            ]]></xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="javax.sql.DataSource"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Can be used to create one or more aliases illegal in an (XML) id.
                                Multiple aliases can be separated by any number of spaces, commas,
                                or semi-colons (or indeed any mixture of the three).
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="unique-name" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Unique name to use for the resource manager (must be the same when
                                restarting to support recovery of transactions).
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="xa-data-source" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                XADataSource to wrap.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="supports-join" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Set to true if this XA datasource correctly supports joining XA resources.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="supports-suspend" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Set to true if this XA datasource supports transaction suspension.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="allow-non-transacted-connections" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Allow getting connections outside active transaction (yes, no, or warn)
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="depends-on" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                The names of the beans that this bean depends on being initialized.
                                The bean factory will guarantee that these beans get initialized
                                before this bean.

                                Note that dependencies are normally expressed through bean properties
                                or constructor arguments. This property should just be necessary for
                                other kinds of dependencies like statics (*ugh*) or database preparation
                                on startup.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="connection-factory">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Creates an JMS ConnectionFactory DataSource wrapped around a supplied
                XAConntectionFactory to support JTA transactions.
            ]]></xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="javax.jms.ConnectionFactory"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Can be used to create one or more aliases illegal in an (XML) id.
                                Multiple aliases can be separated by any number of spaces, commas,
                                or semi-colons (or indeed any mixture of the three).
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="unique-name" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Unique name to use for the resource manager (must be the same when
                                restarting to support recovery of transactions).
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="xa-connection-factory" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                XAConnectionFactory to wrap.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="supports-join" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Set to true if this XA datasource correctly supports joining XA resources.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="supports-suspend" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Set to true if this XA datasource supports transaction suspension.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="depends-on" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                The names of the beans that this bean depends on being initialized.
                                The bean factory will guarantee that these beans get initialized
                                before this bean.

                                Note that dependencies are normally expressed through bean properties
                                or constructor arguments. This property should just be necessary for
                                other kinds of dependencies like statics (*ugh*) or database preparation
                                on startup.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="initialize-database">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Initializes the database by creating the Simple JTA database objects.
            ]]></xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="nl.futureedge.simple.jta.store.jdbc.spring.DatabaseInitializer"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="driver" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                    JDBC Driver (only need for pre JDBC 4.0 drivers).
                ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="url" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                    JDBC URL.
                ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="user" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                    JDBC User.
                ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="password" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                    JDBC Password.
                ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="depends-on" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                The names of the beans that this bean depends on being initialized.
                                The bean factory will guarantee that these beans get initialized
                                before this bean.

                                Note that dependencies are normally expressed through bean properties
                                or constructor arguments. This property should just be necessary for
                                other kinds of dependencies like statics (*ugh*) or database preparation
                                on startup.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="xa-data-source">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Creates an JDBC DataSource wrapped around a supplied XADataSource to support JTA
                transactions.
            ]]></xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="javax.sql.DataSource"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Can be used to create one or more aliases illegal in an (XML) id.
                                Multiple aliases can be separated by any number of spaces, commas,
                                or semi-colons (or indeed any mixture of the three).
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    
                    <xsd:attribute name="driver" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                XA DataSource class name.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="host" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Database server host.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="port" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Database server port
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="database" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Database name.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="user" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Database user.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="password" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                Database password.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>

                    <xsd:attribute name="depends-on" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation><![CDATA[
                                The names of the beans that this bean depends on being initialized.
                                The bean factory will guarantee that these beans get initialized
                                before this bean.

                                Note that dependencies are normally expressed through bean properties
                                or constructor arguments. This property should just be necessary for
                                other kinds of dependencies like statics (*ugh*) or database preparation
                                on startup.
                            ]]></xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

</xsd:schema>
